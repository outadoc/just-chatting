plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("org.jetbrains.kotlin.android.extensions")
    id("org.jetbrains.kotlin.kapt")
    id("com.diffplug.spotless")
}

android {
    signingConfigs {
        debug {
            keyAlias 'debug'
            keyPassword '123456'
            storeFile file('debug-keystore.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 32
    defaultConfig {
        applicationId "fr.outadoc.justchatting"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 104
        versionName "1.6.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            signingConfig signingConfigs.debug
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    // Delete large build log files from ~/.gradle/daemon/X.X/daemon-XXX.out.log
    // Source: https://discuss.gradle.org/t/gradle-daemon-produces-a-lot-of-logs/9905
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            // println("Deleting gradle log file: $it") // Optional debug output
            it.delete()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
        coreLibraryDesugaringEnabled true
    }
    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    lint {
        disable 'ContentDescription'
    }
    namespace 'com.github.andreyasadchy.xtra'
}

spotless {
    kotlin {
        target '**/*.kt'
        ktlint("0.45.2").userData([disabled_rules: "no-wildcard-imports"])
    }
    json {
        target '**/*.json'
        simple().indentWithSpaces(2)
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //UI
    implementation 'com.google.android.material:material:1.7.0-alpha02'

    implementation 'androidx.appcompat:appcompat:1.4.2'

    implementation "androidx.emoji2:emoji2:$emoji"
    implementation "androidx.emoji2:emoji2-views:$emoji"

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.github.woxthebox:draglistview:1.7.2'

    //Architecture components
    implementation "androidx.paging:paging-runtime-ktx:$paging"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle"
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-ktx:$room"
    kapt "androidx.room:room-compiler:$room"
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation "androidx.core:core-ktx:1.8.0"

    //Misc
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.7'
    implementation 'com.ncapdevi:frag-nav:3.3.0'

    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"

    implementation "androidx.tonyodev.fetch2:xfetch2:$fetch"
    implementation "androidx.tonyodev.fetch2okhttp:xfetch2okhttp:$fetch"

    implementation 'androidx.webkit:webkit:1.4.0'

    implementation 'org.checkerframework:checker-qual:3.22.0'

    implementation "io.coil-kt:coil:$coil"
    implementation "io.coil-kt:coil-gif:$coil"

    implementation "com.github.zjupure:webpdecoder:2.0.4.13.1"
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide@aar"

    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"
    kapt "com.google.dagger:dagger-android-processor:$dagger"

    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.3.2"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.2'
}
