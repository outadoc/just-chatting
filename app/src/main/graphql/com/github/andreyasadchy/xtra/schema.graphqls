type Query {
  games(first: Int, after: Cursor): Games
  game(id: ID, name: String): GameNode
  streams(languages: [Language!], first: Int, after: Cursor): Streams
  videos(language: Language, first: Int, after: Cursor): Videos
  video(id: ID): VideoNode
  users(ids: [ID!], logins: [String!]): [User]
  user(id: ID, login: String): User
}

type User {
  id: String
  login: String
  displayName: String
  roles: UserRoles
  description: String
  profileImageURL(width: Int): String
  bannerImageURL: String
  profileViewCount: Int
  createdAt: Time
  followers: FollowerConnection
  follows(first: Int, after: Cursor, order: SortOrder): FollowConnection
  lastBroadcast: Broadcast
  stream: StreamNode
  videos(sort: VideoSort, type: BroadcastType, first: Int, after: Cursor): Videos
  clips(criteria: UserClipsInput, first: Int, after: Cursor): Clips
  cheer: CheerInfo
  followedLiveUsers(first: Int, after: Cursor): FollowedLiveUserConnection
  followedVideos(first: Int, after: Cursor, languages: [String!], types: [BroadcastType!], sort: VideoSort): Videos
  followedGames(first: Int, type: FollowedGamesType): FollowedGameConnection
}

type Broadcast {
  startedAt: Time
}

type FollowerConnection {
  totalCount: Int
}

type FollowConnection {
  totalCount: Int
  edges: [FollowEdge]
  pageInfo: PageInfo
}

type FollowEdge {
  cursor: Cursor
  followedAt: Time
  node: User
}

type FollowedGameConnection {
  nodes: [GameNode]
}

type FollowedLiveUserConnection {
  totalCount: Int
  edges: [FollowedLiveUserEdge]
  pageInfo: PageInfo
}

type FollowedLiveUserEdge {
  cursor: Cursor
  node: User
}

type UserRoles {
  isAffiliate: Boolean
  isExtensionsApprover: Boolean
  isExtensionsDeveloper: Boolean
  isGlobalMod: Boolean
  isPartner: Boolean
  isSiteAdmin: Boolean
  isStaff: Boolean
}

type CheerInfo {
  emotes: [Cheermote]
}

type Cheermote {
  prefix: String
  tiers: [CheermoteTier]
}

type CheermoteTier {
  bits: Int
  color: String
  images(isAnimated: Boolean, dpiScale: Float): [CheermoteImage]
}

type CheermoteImage {
  theme: String!
  isAnimated: Boolean!
  dpiScale: Float!
  url: String!
}

type Games {
  edges: [GameEdges]
  pageInfo: PageInfo
}

type GameEdges {
  cursor: String
  node: GameNode
}

type Streams {
  edges: [StreamEdges]
  pageInfo: PageInfo
}

type StreamEdges {
  cursor: String
  node: StreamNode
}

type Videos {
  edges: [VideoEdges]
  pageInfo: PageInfo
}

type VideoEdges {
  cursor: String
  node: VideoNode
}

type Clips {
  edges: [ClipEdges]
  pageInfo: PageInfo
}

type ClipEdges {
  cursor: String
  node: ClipNode
}

type GameNode {
  id: String
  displayName: String
  boxArtURL: String
  viewersCount: Int
  broadcastersCount: Int
  streams(languages: [String!], first: Int, after: Cursor): Streams
  videos(languages: [String!], sort: VideoSort, types: [BroadcastType!], first: Int, after: Cursor): Videos
  clips(criteria: GameClipsInput, first: Int, after: Cursor): Clips
}

type StreamNode {
  id: String
  broadcaster: broadcaster
  game: GameNode
  type: String
  title: String
  viewersCount: Int
  createdAt: String
  previewImageURL: String
}

type VideoNode {
  id: String
  broadcastType: BroadcastType
  title: String
  owner: broadcaster
  createdAt: String
  previewThumbnailURL: String
  viewCount: Int
  lengthSeconds: Int
  game: GameNode
}

type ClipNode {
  id: String
  slug: ID!
  video: VideoNode
  videoOffsetSeconds: Int
  broadcaster: broadcaster
  title: String
  createdAt: String
  thumbnailURL: String
  viewCount: Int
  durationSeconds: Int
  game: GameNode
}

type broadcaster {
  id: String
  login: String
  displayName: String
  profileImageURL(width: Int): String
}

enum BroadcastType {
  ARCHIVE
  HIGHLIGHT
  UPLOAD
  PREMIERE_UPLOAD
  PAST_PREMIERE
}

enum VideoSort {
  TIME
  VIEWS
}

enum SortOrder {
  ASC
  DESC
}

enum FollowedGamesType {
  LIVE
  ALL
}

input UserClipsInput {
  period: ClipsPeriod
}

input GameClipsInput {
  languages: [Language!]
  period: ClipsPeriod
}

enum ClipsPeriod {
  LAST_DAY
  LAST_WEEK
  LAST_MONTH
  ALL_TIME
}

enum Language {
  AR
  ASL
  BG
  CS
  DA
  DE
  EL
  EN
  ES
  FI
  FR
  HU
  IT
  JA
  KO
  NL
  NO
  OTHER
  PL
  PT
  RU
  SK
  SV
  TH
  TR
  VI
  ZH
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

scalar Time
scalar Cursor

schema {
  query: Query
}
