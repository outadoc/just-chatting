CREATE TABLE Category (
    `id` TEXT NOT NULL,
    `name` TEXT NOT NULL,
    `inserted_at` INTEGER NOT NULL,
    PRIMARY KEY (`id`)
);

CREATE TABLE PastStream (
    `id` TEXT NOT NULL,
    `title` TEXT NOT NULL,
    `user_id` TEXT NOT NULL,
    `start_time` INTEGER NOT NULL,
    `end_time` INTEGER NOT NULL,
    `category_id` TEXT,
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES User(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`category_id`) REFERENCES Category(`id`) ON DELETE SET NULL
);

CREATE TABLE LiveStream (
    `id` TEXT NOT NULL,
    `title` TEXT NOT NULL,
    `user_id` TEXT NOT NULL,
    `start_time` INTEGER NOT NULL,
    `category_id` TEXT,
    `tags` TEXT NOT NULL,
    `viewer_count` INTEGER NOT NULL,
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES User(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`category_id`) REFERENCES Category(`id`) ON DELETE SET NULL
);

CREATE TABLE FutureStream (
    `id` TEXT NOT NULL,
    `title` TEXT NOT NULL,
    `user_id` TEXT NOT NULL,
    `start_time` INTEGER NOT NULL,
    `end_time` INTEGER NOT NULL,
    `category_id` TEXT,
    PRIMARY KEY (`id`),
    FOREIGN KEY (`user_id`) REFERENCES User(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`category_id`) REFERENCES Category(`id`) ON DELETE SET NULL
);

CREATE TABLE StreamCacheInfo (
    `user_id` TEXT NOT NULL,
    `last_updated` INTEGER NOT NULL,
    PRIMARY KEY (`user_id`),
    FOREIGN KEY (`user_id`) REFERENCES User(`id`) ON DELETE CASCADE
);

addCategory:
INSERT OR IGNORE INTO Category (id, name, inserted_at)
VALUES (?, ?, strftime('%s', 'now'));

getPastStreams:
SELECT *, Category.name AS category_name FROM PastStream
LEFT JOIN Category ON PastStream.category_id = Category.id
JOIN User ON PastStream.user_id = User.id
JOIN UserInfo ON PastStream.user_id = UserInfo.id
WHERE start_time >= :notBefore AND start_time <= :notAfter
AND user_id IN (SELECT id FROM User WHERE followed_at > 0)
ORDER BY start_time;

getLiveStreams:
SELECT *, Category.name AS category_name FROM LiveStream
LEFT JOIN Category ON LiveStream.category_id = Category.id
JOIN User ON LiveStream.user_id = User.id
JOIN UserInfo ON LiveStream.user_id = UserInfo.id
WHERE user_id IN (SELECT id FROM User WHERE followed_at > 0)
ORDER BY start_time;

getFutureStreams:
SELECT *, Category.name AS category_name FROM FutureStream
LEFT JOIN Category ON FutureStream.category_id = Category.id
JOIN User ON FutureStream.user_id = User.id
JOIN UserInfo ON FutureStream.user_id = UserInfo.id
WHERE start_time >= :notBefore AND start_time <= :notAfter
AND user_id IN (SELECT id FROM User WHERE followed_at > 0)
ORDER BY start_time;

addPastStream:
INSERT OR REPLACE INTO PastStream (id, title, user_id, start_time, end_time, category_id)
VALUES (?, ?, ?, ?, ?, ?);

addLiveStream:
INSERT OR REPLACE INTO LiveStream (id, title, user_id, start_time, category_id, tags, viewer_count)
VALUES (?, ?, ?, ?, ?, ?, ?);

addFutureStream:
INSERT OR REPLACE INTO FutureStream (id, title, user_id, start_time, end_time, category_id)
VALUES (?, ?, ?, ?, ?, ?);

cleanupPastStreams:
DELETE FROM PastStream WHERE start_time < :notBefore;

cleanupFutureStreams:
DELETE FROM FutureStream WHERE start_time < :notBefore OR start_time > :notAfter OR end_time < :now;

cleanupCategories:
DELETE FROM Category
WHERE id NOT IN (
    SELECT category_id FROM PastStream
    UNION
    SELECT category_id FROM LiveStream
    UNION
    SELECT category_id FROM FutureStream
);

cleanupAllLiveStreams:
DELETE FROM LiveStream;

rememberUserUpdated:
INSERT OR REPLACE INTO StreamCacheInfo (user_id, last_updated)
VALUES (?, strftime('%s', 'now'));
